const { createCanvas, loadImage } = require('canvas');
const path = require('path');
const fs = require('fs');

module.exports = {
  config: {
    name: "info",
    version: "1.8", // Version updated
    author: "TAREK",
    shortDescription: "Display bot and owner info as an image card",
    longDescription: "Shows owner's and bot's details with an image in a visually appealing card format.",
    category: "INFO",
    guide: { en: "[user]" },
  },

  onStart: async function ({ api, event }) {
    const imageUrls = [
      // тЬЕ New Google Drive direct image link provided by Tarek
      "https://files.catbox.moe/phfk4g.jpg"
    ];

    const ownerName = "ЁЭЧФЁЭЧмЁЭЧФЁЭЧб";
    const ownerAge = "18+"; // Updated to 19+
    const ownerEducation = "Diploma in Civil Engineering";
    const ownerSession = "2025-26";
    const ownerFrom = "ЁЭЧЪЁЭЧоЁЭШЗЁЭЧ╢ЁЭЧ╜ЁЭШВЁЭЧ┐";
    const ownerRelation = "ЁЭЧжЁЭЧ╢ЁЭЧ╗ЁЭЧ┤ЁЭЧ╣ЁЭЧ▓";
    const ownerGender = "Male";
    const ownerHobbies = "GAMING тАв MUSIC";
    const botType = "GoatBot V2";

    const randomImage = imageUrls[Math.floor(Math.random() * imageUrls.length)];

    // --- рзз. ржХрзНржпрж╛ржиржнрж╛рж╕ ржжрж┐рзЯрзЗ ржЗржорзЗржЬ ржХрж╛рж░рзНржб рждрзИрж░рж┐ ржХрж░рж╛ ---
    const width = 850; // ржХрж╛рж░рзНржбрзЗрж░ ржкрзНрж░рж╕рзНрже рж╕рж╛ржорж╛ржирзНржп ржмрж╛рзЬрж╛ржирзЛ рж╣рж▓рзЛ
    const height = 1050; // ржХрж╛рж░рзНржбрзЗрж░ ржЙржЪрзНржЪрждрж╛ рж╕рж╛ржорж╛ржирзНржп ржмрж╛рзЬрж╛ржирзЛ рж╣рж▓рзЛ
    const canvas = createCanvas(width, height);
    const ctx = canvas.getContext('2d');

    // ржХрж╛рж▓рж╛рж░ ржкрзНржпрж╛рж▓рзЗржЯ (ржЙржЬрзНржЬрзНржмрж▓рждрж╛ ржмрж╛рзЬрж╛ржирзЛ рж╣рж▓рзЛ)
    const BG_COLOR = '#0f0f1d'; // ржкрзНрж░рж╛ржпрж╝ ржХрж╛рж▓рзЛ
    const CARD_COLOR = '#191933'; // ржЧрж╛ржврж╝ ржирзАрж▓
    const TEXT_COLOR_PRIMARY = '#ffffff'; // ржкрзБрж░рзЛржкрзБрж░рж┐ рж╕рж╛ржжрж╛
    const TEXT_COLOR_SECONDARY = '#b3b3cc'; // рж╣рж╛рж▓ржХрж╛ ржзрзВрж╕рж░-ржирзАрж▓
    const HIGHLIGHT_COLOR = '#FF3366'; // ржЙржЬрзНржЬрзНржмрж▓ рж╣ржЯ ржкрж┐ржЩрзНржХ
    const HEADER_COLOR = '#3366ff'; // ржЙржЬрзНржЬрзНржмрж▓ ржирзАрж▓ рж╣рзЗржбрж╛рж░

    // ржмрзНржпрж╛ржХржЧрзНрж░рж╛ржЙржирзНржб
    ctx.fillStyle = BG_COLOR;
    ctx.fillRect(0, 0, width, height);

    // ржорзЗржЗржи ржЗржиржлрзЛ ржХрж╛рж░рзНржбрзЗрж░ ржЬржирзНржп ржПржХржЯрж┐ ржмрзЬ ржмржХрзНрж╕ ржЖржБржХрж╛
    const cardX = 50;
    const cardY = 50;
    const cardWidth = width - 100;
    const cardHeight = height - 100;
    const cardRadius = 25; // рж░рзЗржбрж┐ржпрж╝рж╛рж╕ ржмрж╛рзЬрж╛ржирзЛ рж╣рж▓рзЛ

    // Rounded Card Function
    const drawRoundedRect = (x, y, w, h, r) => {
        ctx.beginPath();
        ctx.moveTo(x + r, y);
        ctx.lineTo(x + w - r, y);
        ctx.quadraticCurveTo(x + w, y, x + w, y + r);
        ctx.lineTo(x + w, y + h - r);
        ctx.quadraticCurveTo(x + w, y + h, x + w - r, y + h);
        ctx.lineTo(x + r, y + h);
        ctx.quadraticCurveTo(x, y + h, x, y + h - r);
        ctx.lineTo(x, y + r);
        ctx.quadraticCurveTo(x, y, x + r, y);
        ctx.closePath();
        ctx.fill();
    };

    ctx.fillStyle = CARD_COLOR;
    drawRoundedRect(cardX, cardY, cardWidth, cardHeight, cardRadius);

    // рж╣рзЗржбрж╛рж░ рж╕рзЗржХрж╢ржи
    ctx.fillStyle = HEADER_COLOR;
    drawRoundedRect(cardX, cardY, cardWidth, 90, cardRadius); // ржЯржк рж╣рзЗржбрж╛рж░
    ctx.fillStyle = TEXT_COLOR_PRIMARY;
    ctx.font = 'bold 40px sans-serif'; // ржлржирзНржЯ рж╕рж╛ржЗржЬ ржмрж╛рзЬрж╛ржирзЛ рж╣рж▓рзЛ
    ctx.textAlign = 'center';
    ctx.fillText('тЪбя╕П ЁЭЧвЁЭЧкЁЭЧбЁЭЧШЁЭЧе ЁЭЧЬЁЭЧбЁЭЧЩЁЭЧв тЪбя╕П', width / 2, cardY + 60);

    // ржорж╛рж▓рж┐ржХрзЗрж░ ржЫржмрж┐ ржпрзЛржЧ ржХрж░рж╛
    try {
        const ownerImage = await loadImage(randomImage);
        const imgSize = 130; // ржЫржмрж┐рж░ ржЖржХрж╛рж░ ржмрж╛рзЬрж╛ржирзЛ рж╣рж▓рзЛ
        const imgX = width / 2 - imgSize / 2;
        const imgY = cardY + 130; // Y ржкржЬрж┐рж╢ржи ржЕрзНржпрж╛ржбржЬрж╛рж╕рзНржЯ ржХрж░рж╛ рж╣рж▓рзЛ

        // ржЫржмрж┐рж░ ржЬржирзНржп ржмрзГрждрзНрждрж╛ржХрж╛рж░ ржХрзНрж▓рж┐ржкрж┐ржВ ржорж╛рж╕рзНржХ
        ctx.save();
        ctx.beginPath();
        ctx.arc(imgX + imgSize / 2, imgY + imgSize / 2, imgSize / 2, 0, Math.PI * 2, true);
        ctx.closePath();
        ctx.clip();
        ctx.drawImage(ownerImage, imgX, imgY, imgSize, imgSize);
        ctx.restore();

        // ржЫржмрж┐рж░ ржЪрж╛рж░ржкрж╛рж╢рзЗ ржмрж░рзНржбрж╛рж░
        ctx.strokeStyle = HIGHLIGHT_COLOR;
        ctx.lineWidth = 5;
        ctx.beginPath();
        ctx.arc(imgX + imgSize / 2, imgY + imgSize / 2, imgSize / 2 + 3, 0, Math.PI * 2, true);
        ctx.stroke();

    } catch (e) {
        console.error("Failed to load owner image:", e.message);
        ctx.fillStyle = HIGHLIGHT_COLOR;
        ctx.font = '24px sans-serif';
        ctx.fillText('Image Failed to Load', width / 2, cardY + 130 + 65);
    }

    // ржорж╛рж▓рж┐ржХрзЗрж░ рждржерзНржп (Owner Info)
    let textY = cardY + 300;
    const lineHeight = 45; // рж▓рж╛ржЗржи рж╕рзНржкрзЗрж╕рж┐ржВ ржмрж╛рзЬрж╛ржирзЛ рж╣рж▓рзЛ
    const labelIndent = cardX + 100; // рж▓рзЗржмрзЗрж▓рзЗрж░ ржмрж╛ржо ржжрж┐ржХ ржерзЗржХрзЗ ржжрзВрж░рждрзНржм
    const valueIndent = cardX + cardWidth / 2 + 50; // ржорж╛ржирзЗрж░ ржмрж╛ржо ржжрж┐ржХ ржерзЗржХрзЗ ржжрзВрж░рждрзНржм

    const drawInfoLine = (label, value, isHighlight = false) => {
        const size = 24; // ржЯрзЗржХрзНрж╕ржЯ рж╕рж╛ржЗржЬ ржмрж╛рзЬрж╛ржирзЛ рж╣рж▓рзЛ

        ctx.font = `bold ${size}px sans-serif`;
        ctx.fillStyle = TEXT_COLOR_SECONDARY;
        ctx.textAlign = 'left';
        ctx.fillText(label, labelIndent, textY);

        ctx.font = `${size}px sans-serif`;
        ctx.fillStyle = isHighlight ? HIGHLIGHT_COLOR : TEXT_COLOR_PRIMARY;
        ctx.fillText(value, valueIndent, textY);
        textY += lineHeight;
    };

    textY += 20; // Initial spacing
    drawInfoLine('тШБя╕П Name тЮЭ', ownerName, true);
    drawInfoLine('ЁЯОВ Age тЮЭ', ownerAge);
    drawInfoLine('ЁЯза Education тЮЭ', ownerEducation);
    drawInfoLine('тЭДя╕П Session тЮЭ', ownerSession);
    drawInfoLine('ЁЯПа From тЮЭ', ownerFrom);
    drawInfoLine('тЭдя╕П Relation тЮЭ', ownerRelation, true);
    drawInfoLine('тЩВя╕П Gender тЮЭ', ownerGender);

    // рж╕рзЗржХрж╢ржи рж╕рзЗржкрж╛рж░рзЗржЯрж░
    textY += 30;
    ctx.strokeStyle = TEXT_COLOR_SECONDARY;
    ctx.lineWidth = 2;
    ctx.beginPath();
    ctx.moveTo(cardX + 50, textY);
    ctx.lineTo(cardX + cardWidth - 50, textY);
    ctx.stroke();
    textY += 40;

    // рж╢ржЦрзЗрж░ рждржерзНржп (Hobbies)
    ctx.font = `bold 26px sans-serif`;
    ctx.fillStyle = HEADER_COLOR;
    ctx.textAlign = 'center';
    ctx.fillText('тЬж ЁЭЧЫЁЭЧ╝ЁЭЧпЁЭЧпЁЭЧ╢ЁЭЧ▓ЁЭША тЮЭ', width / 2 - 100, textY);
    ctx.fillStyle = TEXT_COLOR_PRIMARY;
    ctx.fillText(ownerHobbies, width / 2 + 50, textY);
    textY += lineHeight;

    // рж╕рзЗржХрж╢ржи рж╕рзЗржкрж╛рж░рзЗржЯрж░
    textY += 30;
    ctx.beginPath();
    ctx.moveTo(cardX + 50, textY);
    ctx.lineTo(cardX + cardWidth - 50, textY);
    ctx.stroke();
    textY += 40;

    // ржмржЯ ржЯрж╛ржЗржк (Bot Type)
    ctx.font = `bold 26px sans-serif`;
    ctx.fillStyle = HEADER_COLOR;
    ctx.textAlign = 'center';
    ctx.fillText('тЬи ЁЭЧХЁЭЧ╝ЁЭШБ ЁЭЧзЁЭШЖЁЭЧ╜ЁЭЧ▓ тЮЭ', width / 2 - 100, textY);
    ctx.fillStyle = TEXT_COLOR_PRIMARY;
    ctx.fillText(botType, width / 2 + 50, textY);
    textY += lineHeight;

    // ржлрзБржЯрж╛рж░ ржорзЗрж╕рзЗржЬ
    textY += 50;
    ctx.font = `italic 28px sans-serif`;
    ctx.fillStyle = HIGHLIGHT_COLOR;
    ctx.fillText('ЁЯТл ЁЭЧзЁЭЧ╡ЁЭЧоЁЭЧ╗ЁЭЧ╕ЁЭША ЁЭЧ│ЁЭЧ╝ЁЭЧ┐ ЁЭШВЁЭШАЁЭЧ╢ЁЭЧ╗ЁЭЧ┤ ЁЭЧ║ЁЭЧ▓ ЁЯТл', width / 2, textY);


    // --- рзи. ржЗржорзЗржЬ ржмрж╛ржлрж╛рж░ рждрзИрж░рж┐ ржУ ржкрж╛ржарж╛ржирзЛ ---
    const buffer = canvas.toBuffer('image/png');
    const imagePath = path.join(__dirname, `info_card_${Date.now()}.png`);
    fs.writeFileSync(imagePath, buffer);

    try {
        await api.sendMessage({
            body: ``,
            attachment: fs.createReadStream(imagePath)
        }, event.threadID, event.messageID);
    } catch (e) {
        console.error("Failed to send image, falling back to text.", e);
        // Fallback message should be added here if needed
        await api.sendMessage({ body: "ржЗржорзЗржЬ ржХрж╛рж░рзНржб рждрзИрж░рж┐ ржмрж╛ ржкрж╛ржарж╛рждрзЗ ржмрзНржпрж░рзНрже рж╣ржпрж╝рзЗржЫрзЗред рж╕ржорзНржнржмржд ржЫржмрж┐рж░ рж▓рж┐ржЩрзНржХ ржХрж╛ржЬ ржХрж░ржЫрзЗ ржирж╛ред" }, event.threadID, event.messageID);
    }
    
    fs.unlinkSync(imagePath);
  },
};
