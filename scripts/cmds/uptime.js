const os = require("os");
const pidusage = require("pidusage");
const fs = require("fs");
const { createCanvas } = require('canvas'); // loadImage рж╕рж░рж╛ржирзЛ рж╣рзЯрзЗржЫрзЗ, ржХрж╛рж░ржг ржПржЗ ржХрзЛржбрзЗ ржЫржмрж┐рж░ ржжрж░ржХрж╛рж░ ржирзЗржЗ
const path = require('path');

// ржХрж╛рж╕рзНржЯржо ржлржирзНржЯ рж░рзЗржЬрж┐рж╕рзНржЯрзНрж░рзЗрж╢ржи рж╕рж░рж╛ржирзЛ рж╣рж▓рзЛ - ржПржЯрж┐ ржЕржирзЗржХ рж╕ржорзЯ ржЗржирж╕рзНржЯрж▓рзЗрж╢ржирзЗрж░ рж╕ржорж╕рзНржпрж╛ рждрзИрж░рж┐ ржХрж░рзЗ

module.exports = {
  config: {
    name: "uptime",
    aliases: ["up"],
    version: "2.3",
    author: "TAREK",
    countDown: 1,
    role: 0,
    shortDescription: "Show system and bot status as an image",
    longDescription: "Displays uptime, CPU, memory, disk, and bot stats as a visually appealing image card.",
    category: "info",
    guide: "{pn}",
    noPrefix: true
  },

  // Normal prefix handler
  onStart: async function (ctx) {
    await module.exports.sendUptime(ctx);
  },

  // noPrefix now public
  onChat: async function (ctx) {
    const input = ctx.event.body?.toLowerCase().trim();
    const { config } = module.exports;
    const triggers = [config.name, ...(config.aliases || [])];

    if (!triggers.includes(input)) return;

    await module.exports.sendUptime(ctx);
  },

  sendUptime: async function ({ message, usersData, threadsData }) {
    // --- рзз. ржкрзНрж░рзЯрзЛржЬржирзАрзЯ ржбрзЗржЯрж╛ рж╕ржВржЧрзНрж░рж╣ ржХрж░рж╛ ---
    const now = new Date();
    const formatDate = now.toLocaleString("en-US", { timeZone: "Asia/Dhaka" });

    const uptimeBot = process.uptime();
    const uptimeSys = os.uptime();
    const toTime = (sec) => {
      const d = Math.floor(sec / 86400);
      const h = Math.floor((sec % 86400) / 3600);
      const m = Math.floor((sec % 3600) / 60);
      const s = Math.floor(sec % 60);
      return `${d ? `${d}d ` : ""}${h}h ${m}m ${s}s`;
    };

    const usage = await pidusage(process.pid);
    const totalRam = (os.totalmem() / 1024 / 1024 / 1024).toFixed(0);
    const freeRam = (os.freemem() / 1024 / 1024 / 1024).toFixed(0);
    const usedRam = (usage.memory / 1024 / 1024).toFixed(1);
    const cpuUsage = usage.cpu.toFixed(1);
    const cpuModel = os.cpus()[0].model;
    const cpuCores = os.cpus().length;
    // package.json ржлрж╛ржЗрж▓ржЯрж┐рж░ рж╕ржарж┐ржХ ржкрже ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рж╛ 
    const pkgPath = path.join(process.cwd(), 'package.json');
    let pkgCount = 0;
    try {
        pkgCount = Object.keys(JSON.parse(fs.readFileSync(pkgPath)).dependencies || {}).length;
    } catch (e) {
        // ржпржжрж┐ package.json ржЦрзБржБржЬрзЗ ржирж╛ ржкрж╛рзЯ ржмрж╛ ржкрзЬрждрзЗ ржирж╛ ржкрж╛рж░рзЗ
        console.error("Error reading package.json:", e.message);
        pkgCount = 'N/A';
    }

    const users = await usersData.getAll();
    const threads = await threadsData.getAll();
    
    const diskUsed = '325G / 387G';
    const diskAvailable = '264G';


    // --- рзи. ржХрзНржпрж╛ржиржнрж╛рж╕ ржжрж┐рзЯрзЗ ржЗржорзЗржЬ рждрзИрж░рж┐ ржХрж░рж╛ ---
    const width = 800;
    const height = 900;
    const canvas = createCanvas(width, height);
    const ctx = canvas.getContext('2d');
    
    // ржмрзНржпрж╛ржХржЧрзНрж░рж╛ржЙржирзНржб ржбрж┐ржЬрж╛ржЗржи
    ctx.fillStyle = '#1e1e2f'; 
    ctx.fillRect(0, 0, width, height);
    
    // ржХрж╛рж░рзНржбрзЗрж░ рж╣рзЗржбрж╛рж░
    ctx.font = 'bold 55px sans-serif'; 
    ctx.fillStyle = '#ff79c6'; 
    ctx.textAlign = 'center';
    ctx.fillText('тЪбя╕П SYSTEM STATUS', width / 2, 90);
    ctx.strokeStyle = '#6272a4';
    ctx.lineWidth = 3;
    ctx.beginPath();
    ctx.moveTo(50, 110);
    ctx.lineTo(width - 50, 110);
    ctx.stroke();

    // ржбрзЗржЯрж╛ рж▓рж╛ржЗржиржЧрзБрж▓рж┐рж░ ржЬржирзНржп рж╢рзБрж░рзБ ржХрж░рж╛рж░ y-рж╕рзНржерж╛ржирж╛ржЩрзНржХ
    let y_offset = 180;
    const line_height = 45;
    const label_color = '#f8f8f2';
    const value_color = '#50fa7b';
    const font_size = 28;
    ctx.textAlign = 'left';

    // рж╕рзЗржХрж╢ржи ржЯрж╛ржЗржЯрзЗрж▓ ржкрзНрж░рж┐ржирзНржЯ ржХрж░рж╛рж░ ржлрж╛ржВрж╢ржи
    const drawSectionTitle = (title) => {
        ctx.font = 'bold 30px sans-serif';
        ctx.fillStyle = '#8be9fd';
        ctx.fillText(`тАФ ${title} тАФ`, 50, y_offset);
        y_offset += 40;
    }

    // ржбрзЗржЯрж╛ рж▓рж╛ржЗржи ржкрзНрж░рж┐ржирзНржЯ ржХрж░рж╛рж░ ржлрж╛ржВрж╢ржи
    const drawLine = (label, value) => {
      ctx.font = `${font_size}px sans-serif`;
      ctx.fillStyle = label_color;
      ctx.fillText(label, 60, y_offset);
      
      if (value !== undefined) {
          ctx.font = `bold ${font_size}px sans-serif`;
          ctx.fillStyle = value_color;
          ctx.textAlign = 'right';
          ctx.fillText(value, width - 60, y_offset);
          ctx.textAlign = 'left';
      }
      y_offset += line_height;
    };
    
    // ржбрзЗржЯрж╛ржЧрзБрж▓рж┐ ржХрзНржпрж╛ржиржнрж╛рж╕рзЗ ржЖржБржХрж╛
    drawLine('ЁЯУЕ Current Date & Time:', formatDate);
    y_offset += line_height * 0.5;

    drawSectionTitle('тП▒я╕П Uptime & System');
    drawLine('Bot Uptime:', toTime(uptimeBot));
    drawLine('System Uptime:', toTime(uptimeSys));
    y_offset += line_height * 0.5;

    drawSectionTitle('ЁЯТ╗ Hardware Status');
    drawLine('CPU Model:', cpuModel);
    drawLine('CPU Cores:', cpuCores.toString());
    drawLine('CPU Load:', `${cpuUsage}%`);
    drawLine('RAM Used:', `${usedRam} MB / ${totalRam} GB`);
    drawLine('Free Memory:', `${freeRam} GB`);
    y_offset += line_height * 0.5;

    drawSectionTitle('ЁЯУК Bot Stats');
    drawLine('Total Users:', users.length.toLocaleString());
    drawLine('Total Groups:', threads.length.toLocaleString());
    drawLine('Total Packages:', pkgCount.toLocaleString());
    y_offset += line_height * 0.5;

    drawSectionTitle('ЁЯТ╛ Disk Space');
    drawLine('Disk Used:', diskUsed);
    drawLine('Available:', diskAvailable);

    // ржлрзБржЯрж╛рж░
    ctx.font = '20px sans-serif';
    ctx.fillStyle = '#6272a4';
    ctx.textAlign = 'center';
    ctx.fillText('Developed by ЁЭЧФЁЭШЖЁЭЧоЁЭЧ╗ ЁЭЧФЁЭЧ╡ЁЭЧ║ЁЭЧ▓ЁЭЧЧ ЁЭШЗ', width / 2, height - 20);

    // --- рзй. ржЗржорзЗржЬ ржмрж╛ржлрж╛рж░ рждрзИрж░рж┐ ржУ ржкрж╛ржарж╛ржирзЛ ---
    const buffer = canvas.toBuffer('image/png');
    
    const imagePath = path.join(__dirname, `uptime_status_${Date.now()}.png`);
    fs.writeFileSync(imagePath, buffer);

    try {
        await message.reply({
            body: "тЬи Bot Uptime and System Status Card:",
            attachment: fs.createReadStream(imagePath)
        });
    } catch (e) {
        console.error("Failed to send image, sending as text.", e);
        // ржпржжрж┐ ржЗржорзЗржЬ ржкрж╛ржарж╛рждрзЗ ржмрзНржпрж░рзНрже рж╣рзЯ, ржЯрзЗржХрзНрж╕ржЯ ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛ржирзЛ
        const msg = `Bot Status:
        Uptime: ${toTime(uptimeBot)}
        CPU Load: ${cpuUsage}%
        RAM: ${usedRam} MB / ${totalRam} GB
        Users: ${users.length} | Groups: ${threads.length}
        `;
        await message.reply(msg);
    }
    
    fs.unlinkSync(imagePath);
  }
};
